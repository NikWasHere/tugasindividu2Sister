version: '3.8'

services:
  # Redis for message persistence
  redis:
    image: redis:7-alpine
    container_name: distributed-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - distributed-net

  # Node 1 (Leader candidate)
  node-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: distributed-node-1
    environment:
      - NODE_ID=node-1
      - NODE_HOST=node-1
      - NODE_PORT=5000
      - CLUSTER_NODES=node-1:node-1:5000,node-2:node-2:5001,node-3:node-3:5002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    ports:
      - "5000:5000"
      - "9090:9090"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - distributed-net
    command: python -m src.main --node-id node-1 --type all

  # Node 2
  node-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: distributed-node-2
    environment:
      - NODE_ID=node-2
      - NODE_HOST=node-2
      - NODE_PORT=5001
      - CLUSTER_NODES=node-1:node-1:5000,node-2:node-2:5001,node-3:node-3:5002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    ports:
      - "5001:5001"
      - "9091:9090"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - distributed-net
    command: python -m src.main --node-id node-2 --type all

  # Node 3
  node-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: distributed-node-3
    environment:
      - NODE_ID=node-3
      - NODE_HOST=node-3
      - NODE_PORT=5002
      - CLUSTER_NODES=node-1:node-1:5000,node-2:node-2:5001,node-3:node-3:5002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    ports:
      - "5002:5002"
      - "9092:9090"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - distributed-net
    command: python -m src.main --node-id node-3 --type all

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: distributed-prometheus
    ports:
      - "9093:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - distributed-net

volumes:
  redis-data:
  prometheus-data:

networks:
  distributed-net:
    driver: bridge
